<?php
// greatest dimensions smaller or equal to original (will keep aspect ratio)
define('IMAGE_RESIZE_FIT', 0);
// similar to IMAGE_RESIZE_FIT, but adds transparent stripes
define('IMAGE_RESIZE_PAD', 1);
// will strech the image, does not keep aspect ratio
define('IMAGE_RESIZE_STRECH', 2);

g()->load('Upload', 'model');

/**
 * Handing media files.
 *
 * @author m.augustynowicz
 *
 * @see FFile this field should be used to relate with this model
 *
 * THIS MODEL HAS NO SUPPORT FOR TRANSACTIONS!
 * You have been warned.
 *
 * File structure in UPLOAD_DIR should look like this:
 * UPLOAD_DIR/media/{model}/{hash}/file
 * UPLOAD_DIR/media/{model}/{hash}/file.mp4 // or .mp3 for audio files
 * UPLOAD_DIR/media/{model}/{hash}/file.jpg
 */
class MediaUploadModel extends UploadModel
{

    // overridding default settings from UploadModel
    
    /**
     * @val string subdirectory of UPLOAD_DIR to keep files in
     *      field config "subdirectory"
     */
    protected $_subdirectory = 'media';
    /**
     * @val int maximul file size to upload [MB] (false for ini settings)
     *      field config "max size"
     */
    protected $_max_size = 100;


    // this model's settings

    /**
     * @val int audio bitrate for audio files [kbps]
     *      field config "audio bitrate"
     */
    protected $_audio_br = 96;
    /**
     * @val int video bitrate for video files [kbps]
     *      field config "video bitrate"
     */
    protected $_video_br = 160; 
    /**
     * @val int audio br for video files [kbps]
     *      field config "vdeo audio bitrate"
     */
    protected $_video_audio_br = 96; 
    /**
     * @val int video width [px]
     *      field config "video width"
     */
    protected $_video_w = 320;
    /**
     * @val int video height [px]
     *      field config "video height"
     */
    protected $_video_h = 240;
    /**
     * @val int position of video to take thumbnail of [sec]
     *      field config "video thumb position"
     */
    protected $_video_thumb_pos = 0;
    /**
     * @val array video thumbnails, values are keys with values:
     *      width, height, mode (IMAGE_RESIZE_{FIT,PAD,STRECH})
     *      e.g. array(array(160,160,IMAGE_RESIZE_FIT))
     *      field config "video thumbnails"
     */
    protected $_video_thumbs = array();



    public function __construct(array $conf = array())
    {
        parent::__construct($conf);

        if (null !== $val = $this->_field->getConf('audio bitrate'))
            $this->_audio_br = $val;
        if (null !== $val = $this->_field->getConf('video bitrate'))
            $this->_video_br = $val;
        if (null !== $val = $this->_field->getConf('video audio bitrate'))
            $this->_video_audio_br = $val;
        if (null !== $val = $this->_field->getConf('video width'))
            $this->_video_w = $val;
        if (null !== $val = $this->_field->getConf('video height'))
            $this->_video_h = $val;
        if (null !== $val = $this->_field->getConf('video thumb position'))
            $this->_video_thumb_pos = $val;
        if (null !== $val = $this->_field->getConf('video thumbnails'))
            $this->_video_thumbs = $val;
    }


    /**
     * Returns the full path of given filename in the upload directory.
     */
    protected function _getPath($model, $file_name)
    {
        $directory = $model . DIRECTORY_SEPARATOR . $file_name;
        return parent::_getPath($directory, 'file');
    }

    /**
     * Callback launched before deleting file from UPLOAD_DIR
     * @author m.augustynowicz
     *
     * @param string $path file location (generated by _getPath())
     */
    protected function _beforeDeleting($path)
    {
        $this->_deleteRelatedFiles($path);
        return true;
    }


    /**
     * Callback launched after deleting a file from UPLOAD_DIR
     * @author m.augustynowicz
     * 
     * @param string $path file location (generated by _getPath())
     */
    protected function _afterDeleting($path)
    {
        // it should be empty at this point,
        // but if it's not -- this will cause warning
        rmdir(dirname($path));
        return true;
    }


    /**
     * Callback launched after storing file in UPLOAD_DIR
     * @author m.augustynowicz
     * 
     * @param string $path file location (generated by _getPath())
     * @param array $data part of database row (will contain [original_mime]
     *        and [original_name])
     * @param string $action update|insert
     */
    protected function _afterStoring($path, array $data, $action)
    {
        $this->_deleteRelatedFiles($path);

        $f = g('Functions');

        list($type) = explode('/', $data['original_mime']);

        switch ($type)
        {
            case 'audio' :
                return $this->_createAudio($path, $data);
                break;
            case 'video' :
                return $this->_createVideo($path, $data);
                break;
            default :
                // nothing to do, we happy.
                return true;
                break;
        }
    }


    /**
     * Delete all ${path}.*
     * @author m.augustynowicz
     *
     * @param string $path
     */
    protected function _deleteRelatedFiles($path)
    {
        $paths = glob($path . '.*');
        if ($paths)
        {
            foreach ($paths as $p)
            {
                unlink($p);
            }
        }
    }


    /**
     * Take file and convert it to mp3
     * @author m.augustynowicz
     *
     * @param string $path original file
     * @param array $data will contain [original_mime]
     * @return boolean success of the conversion
     */
    protected function _createAudio($path, array $data)
    {
        $f = g('Functions');

        $path_mp3 = escapeshellarg($path . '.mp3');
        $path = escapeshellarg($path);

        $ab = escapeshellarg($this->_audio_br * 1024);

        $f->exec(
                'ffmpeg-mp3',
                    '-i '.$path
                    . ' %s'
                    . ' -ab '.$ab
                    . ' '.$path_mp3,
                $output, $return_value
            );

        return 0 == $return_value;
    }

    /**
     * Take file and convert it to mp4 also, creates thumbnail
     * @author m.augustynowicz
     *
     * @param string $path original file
     * @param array $data will contain [original_mime]
     * @return boolean success of the conversion
     */
    protected function _createVideo($path, array $data)
    {
        $f = g('Functions');

        $path_mp3 = escapeshellarg($path . '.mp4');
        $path_mp4 = escapeshellarg($path . '.jpeg');
        $path_jpeg = escapeshellarg($path . '.frame.jpeg');
        $path_thumb = escapeshellarg($path . '.%dx%d.png');
        $path = escapeshellarg($path);

        $vb = escapeshellarg($this->_video_br * 1024);
        $ab = escapeshellarg($this->_video_audio_br * 1024);
        $vs = escapeshellarg($this->_video_w . 'x' . $this->_video_h);
        $jpeg_sec = escapeshellarg($this->_video_thumb_pos);


        // mp4 video

        $f->exec(
                'ffmpeg-mp4',
                    '-i '.$path
                    . ' %s'
                    . ' -ab '.$ab
                    . ' -b '.$vb
                    . ' -s '.$vs
                    . ' '.$path_mp3,
                $output, $return_value
            );
        if (0 != $return_value)
            return false;

        // frame

        $f->exec(
                'ffmpeg-jpeg',
                    '-i '.$path
                    . ' %s'
                    . ' -ss '.$jpeg_sec
                    . ' -s '.$vs
                    . ' '.$path_jpeg,
                $output, $return_value
            );
        if (0 != $return_value)
            return false;

        // thumbnails
        if (!empty($thumbnails))
        {
            $im = imagecreatefromjpeg($path_jpeg);
            $image_w = imagesx($im);
            $image_h = imagesy($im);
            foreach ($thumbnails as $thumb_args)
            {
                // dimensions:
                //
                // $image_w, $image_h -- original image
                // $width, $height -- we are trying to fit into this
                //                    (later on: output image dimensions)
                // $w, $h -- we are resizing original to this

                $width = $thumb_args[0];
                $height = $thumb_args[1];
                $mode = $thumb_args[2];

                $th_path = sprintf($path_thumb, $width, $height);

                if (IMAGE_RESIZE_STRECH == $mode)
                {
                    $w = $width;
                    $h = $height;
                }
                else
                {
                    $scale = $width / $image_w;
                    if ($image_h * $scale > $height)
                        $scale = $height / $image_h;
                    $w = $scale * $image_w;
                    $h = $scale * $image_h;
                    if (IMAGE_RESIZE_FIT == $mode)
                    {
                        $width = $w;
                        $height = $h;
                    }
                }

                $thumb_im = imagecreatetruecolor($width, $height);

                imagealphablending($thumb_im, false);
                imagesavealpha($thumb_im, true);
                $transparency = imagecolorallocatealpha($thumb_im,
                                                        255, 0, 255, 127);
                imagefill($thumb_im, 0, 0, $transparency);
                imagealphablending($thumb_im, true);

                imagecopyresampled(
                        $thumb_im, $im,
                        ($width - $w)/2, ($height - $h)/2,
                        0, 0,
                        $w, $h,
                        $image_w, $image_h
                    );

                if (!imagepng($thumb_im, $th_path))
                {
                    imagedestroy($thumb_im);
                    imagedestroy($im);
                    return false;
                }
                imagedestroy($thumb_im);
            }

            imagedestroy($im);
        }

        return true;
    }

}

